<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Scan the JavaConfig -->
	<context:component-scan base-package="pel.samples.app" />

	<mvc:annotation-driven />

    <!--
        Setup a simple strategy:
           1. Disabled path extension. Note that favor does not mean use one approach in preference to another, it just enables or disables it. 
           	  The order of checking is always path extension, parameter, Accept header.
           	 
           2. Enable the use of the URL parameter but instead of using the default parameter, format, we will use mediaType instead.
           3. Ignore the Accept header completely. This is often the best approach if most of your clients are actually web-browsers (typically making REST calls via AJAX)
           4. Don't use the JAF, instead specify the media type mappings manually - we only wish to support HTML, JSON and XML.
     -->
	<bean id="cnManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="false" />
		<property name="favorParameter" value="true" />
		<property name="parameterName" value="mediaType" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="useJaf" value="false" />
		<property name="defaultContentType" value="text/html" />

		<property name="mediaTypes">
			<map>
			    <entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
	</bean>

	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- All configuration is now done by the manager - since Spring V3.2 -->
		<property name="contentNegotiationManager" ref="cnManager" />

		<property name="viewResolvers">
			<list>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
				</bean>
				<!-- <bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"> 
					<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"></property> 
					<property name="order" value="0"></property> </bean> -->
			</list>
		</property>
<!-- 		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView"> 
					<constructor-arg> <bean class="org.springframework.oxm.xstream.XStreamMarshaller"> 
					<property name="autodetectAnnotations" value="true" /> </bean> </constructor-arg> 
					</bean>
			</list>
		</property> -->
	</bean>

	<!-- <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"> 
		<property name="mediaTypes"> <map> <entry key="json" value="application/json"/> 
		</map> </property> <property name="viewResolvers"> <list> <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/> 
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="prefix" value="/WEB-INF/jsp/"/> <property name="suffix" value=".jsp"/> 
		</bean> </list> </property> <property name="defaultViews"> <list> <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" 
		/> </list> </property> </bean> -->

</beans>